<?php

declare(strict_types=1);

/**
 * NOTICE OF LICENSE.
 *
 * UNIT3D Community Edition is open-sourced software licensed under the GNU Affero General Public License v3.0
 * The details is bundled with this project in the file LICENSE.txt.
 *
 * @project    UNIT3D Community Edition
 *
 * @author     HDVinnie <hdinnovations@protonmail.com>
 * @license    https://www.gnu.org/licenses/agpl-3.0.en.html/ GNU Affero General Public License v3.0
 */

use App\Http\Controllers\Staff\ModerationController;
use App\Http\Requests\Staff\UpdateModerationRequest;
use App\Models\Group;
use App\Models\Torrent;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('index returns an ok response', function (): void {
    $torrents = Torrent::factory()->times(3)->create([
        'status' => 0,
    ]);

    $group = Group::factory()->create([
        'is_torrent_modo' => 1,
    ]);
    $staff = User::factory()->create([
        'group_id' => $group->id,
    ]);

    $response = $this->actingAs($staff)->get(route('staff.moderation.index'));

    $response->assertOk();
    $response->assertViewIs('Staff.moderation.index');
    $response->assertViewHas('current');
    $response->assertViewHas('pending');
    $response->assertViewHas('postponed');
    $response->assertViewHas('rejected');
    $response->assertSee($torrents[0]->name);
    $response->assertSee($torrents[1]->name);
    $response->assertSee($torrents[2]->name);
});

test('update validates with a form request', function (): void {
    $this->assertActionUsesFormRequest(
        ModerationController::class,
        'update',
        UpdateModerationRequest::class
    );
});

test('update returns an ok response', function (): void {
    $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

    $torrent = Torrent::factory()->create();
    $user = User::factory()->create();

    $response = $this->actingAs($user)->post(route('staff.moderation.update', ['id' => $id]), [
        // TODO: send request data
    ]);

    $response->assertOk();

    // TODO: perform additional assertions
});

test('postpone a torrent returns an ok response', function (): void {
    $torrent = Torrent::factory()->create([
        'status' => 0,
    ]);

    $group = Group::factory()->create([
        'is_torrent_modo' => 1,
    ]);
    $staff = User::factory()->create([
        'group_id' => $group->id,
    ]);

    $response = $this->actingAs($staff)->post(route('staff.moderation.update', ['id' => $torrent->id]), [
        'old_status' => Torrent::PENDING,
        'status'     => Torrent::POSTPONED,
        'message'    => 'This is a postponement message.',
    ]);

    $response->assertRedirect(route('staff.moderation.index'));
    $response->assertSessionHas('success', 'Torrent Postponed');

    $this->assertDatabaseHas('torrents', [
        'id'     => $torrent->id,
        'status' => Torrent::POSTPONED,
    ]);

    $this->assertDatabaseHas('conversations', [
        'subject' => 'Your upload, '.$torrent->name.', has been postponed by '.$staff->username,
    ]);

    $this->assertDatabaseHas('torrent_moderation_messages', [
        'torrent_id'   => $torrent->id,
        'moderated_by' => $staff->id,
        'message'      => 'This is a postponement message.',
    ]);
});

test('reject a torrent returns an ok response', function (): void {
    $torrent = Torrent::factory()->create([
        'status' => 0,
    ]);

    $group = Group::factory()->create([
        'is_torrent_modo' => 1,
    ]);
    $staff = User::factory()->create([
        'group_id' => $group->id,
    ]);

    $response = $this->actingAs($staff)->post(route('staff.moderation.update', ['id' => $torrent->id]), [
        'old_status' => Torrent::PENDING,
        'status'     => Torrent::REJECTED,
        'message'    => 'This is a rejection message.',
    ]);

    $response->assertRedirect(route('staff.moderation.index'));
    $response->assertSessionHas('success', 'Torrent Rejected');

    $this->assertDatabaseHas('torrents', [
        'id'     => $torrent->id,
        'status' => Torrent::REJECTED,
    ]);

    $this->assertDatabaseHas('conversations', [
        'subject' => 'Your upload, '.$torrent->name.', has been rejected by '.$staff->username,
    ]);

    $this->assertDatabaseHas('torrent_moderation_messages', [
        'torrent_id'   => $torrent->id,
        'moderated_by' => $staff->id,
        'message'      => 'This is a rejection message.',
    ]);
});
